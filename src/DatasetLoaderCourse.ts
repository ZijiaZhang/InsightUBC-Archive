import {DataSetDataCourse, IDataRowCourse} from "./DataSetDataCourse";
import * as JSZip from "jszip";
import {InsightDatasetKind, InsightError} from "./controller/IInsightFacade";
import {JsonParser} from "./JsonParser";
import {DatasetLoader} from "./DatasetLoader";

export class DatasetLoaderCourse extends DatasetLoader {
    private dataset: DataSetDataCourse;

    constructor (content: string, id: string) {
        super(content, id);
        this.dataset = new DataSetDataCourse(id);
    }

    public getDataset(): Promise<DataSetDataCourse> {
        return new Promise<DataSetDataCourse>((resolve, reject) => {
            JSZip.loadAsync(this.content, {base64: true}).then(
                (zipFile: JSZip) => {
                    if (!("courses/" in zipFile.files)) {
                        return reject(new InsightError("No Courses found in Zip"));
                    }
                    let allPromise: Array<Promise<string>> = [];
                    zipFile.forEach((relativePath, file) => {
                        let names = relativePath.split("/");
                        if (names[0] !== "courses") {
                            return;
                        } // Determine if the file in the courses folder.
                        if (!file.dir) { // Determine if file is a directory.
                            allPromise.push(file.async("text")); // Add to list.
                        }
                    });
                    if (allPromise.length <= 0) {
                        return reject(new InsightError("No file Found in 'courses/'"));
                    }
                    return this.handleAllFiles(allPromise, resolve, reject);
                }
            ).catch((reason: any) => {
                return reject(new InsightError(reason));
            });
        });
    }


    /**
     *
     * @param allPromise           The promises generated by all the files.
     * @param resolve              The resolve function
     * @param reject               The reject function
     * This function will handel all the promises generged by all the files. And will resolve/ reject accordingly:
     * Will resolve if at least one valid solution has been added to the dataset.
     * Will reject if no valid section added to the dataset or an error occured.
     */

    private handleAllFiles(allPromise: Array<Promise<string>>,
                           resolve: (x: DataSetDataCourse) => any, reject: (x: InsightError) => any) {
        let validSectionCount = 0;
        return Promise.all(allPromise).then((datas) => {
            for (let data of datas) {
                let dataInFile = JsonParser.parseData(data, InsightDatasetKind.Courses) as IDataRowCourse[];
                if (dataInFile != null) {
                    for (let dataRow of dataInFile) {
                        if (!this.dataset.addData(dataRow)) {
                            return reject(new InsightError("Dataset not Loaded"));
                        }
                        validSectionCount++;
                    }
                }
            }
            if (validSectionCount <= 0) {
                return reject(new InsightError("No Section Valid"));
            }
            return resolve(this.dataset);
        }).catch(() => {
            return reject(new InsightError("Error Processing File"));
        });
    }
}
